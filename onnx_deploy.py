# image.solを使用
#IPFSのハッシュ値を格納し、コントラクトのアドレスを別ファイルに記述するコード
from web3 import Web3
import json

# Ganacheのローカルノードに接続
web3 = Web3(Web3.HTTPProvider('http://localhost:7545'))
web3.eth.default_account = web3.eth.accounts[2]  # アカウントを選択

# スマートコントラクトのABIとバイナリを設定
contract_abi = '''
[
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "Received",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_hashName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_ipfsHash",
				"type": "string"
			}
		],
		"name": "addHash",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "balance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_hashName",
				"type": "string"
			}
		],
		"name": "getHash",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "ipfsData",
		"outputs": [
			{
				"internalType": "string",
				"name": "ipfsHash",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"stateMutability": "payable",
		"type": "receive"
	}
]
'''
contract_bytecode = "60806040526000805534801561001457600080fd5b50610c9e806100246000396000f3fe6080604052600436106100435760003560e01c80635b6beeb914610181578063aceed265146101b1578063c2a08015146101ef578063e3d670d71461022c5761017c565b3661017c577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258743334604051610079929190610530565b60405180910390a16000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361010d5734600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461015c9190610588565b92505081905550346000808282546101749190610588565b925050819055005b600080fd5b61019b60048036038101906101969190610716565b610269565b6040516101a891906107de565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190610716565b610322565b6040516101e6929190610800565b60405180910390f35b3480156101fb57600080fd5b5061021660048036038101906102119190610830565b610404565b60405161022391906108a8565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e91906108ef565b6104be565b604051610260919061091c565b60405180910390f35b6060600060018360405161027d9190610973565b9081526020016040518091039020905080600001805461029c906109b9565b80601f01602080910402602001604051908101604052809291908181526020018280546102c8906109b9565b80156103155780601f106102ea57610100808354040283529160200191610315565b820191906000526020600020905b8154815290600101906020018083116102f857829003601f168201915b5050505050915050919050565b60018180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461035b906109b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610387906109b9565b80156103d45780601f106103a9576101008083540402835291602001916103d4565b820191906000526020600020905b8154815290600101906020018083116103b757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600060405180604001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff168152506001846040516104419190610973565b908152602001604051809103902060008201518160000190816104649190610b96565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060003390508091505092915050565b60026020528060005260406000206000915090505481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610501826104d6565b9050919050565b610511816104f6565b82525050565b6000819050919050565b61052a81610517565b82525050565b60006040820190506105456000830185610508565b6105526020830184610521565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061059382610517565b915061059e83610517565b92508282019050808211156105b6576105b5610559565b5b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610623826105da565b810181811067ffffffffffffffff82111715610642576106416105eb565b5b80604052505050565b60006106556105bc565b9050610661828261061a565b919050565b600067ffffffffffffffff821115610681576106806105eb565b5b61068a826105da565b9050602081019050919050565b82818337600083830152505050565b60006106b96106b484610666565b61064b565b9050828152602081018484840111156106d5576106d46105d5565b5b6106e0848285610697565b509392505050565b600082601f8301126106fd576106fc6105d0565b5b813561070d8482602086016106a6565b91505092915050565b60006020828403121561072c5761072b6105c6565b5b600082013567ffffffffffffffff81111561074a576107496105cb565b5b610756848285016106e8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561079957808201518184015260208101905061077e565b60008484015250505050565b60006107b08261075f565b6107ba818561076a565b93506107ca81856020860161077b565b6107d3816105da565b840191505092915050565b600060208201905081810360008301526107f881846107a5565b905092915050565b6000604082019050818103600083015261081a81856107a5565b90506108296020830184610508565b9392505050565b60008060408385031215610847576108466105c6565b5b600083013567ffffffffffffffff811115610865576108646105cb565b5b610871858286016106e8565b925050602083013567ffffffffffffffff811115610892576108916105cb565b5b61089e858286016106e8565b9150509250929050565b60006020820190506108bd6000830184610508565b92915050565b6108cc816104f6565b81146108d757600080fd5b50565b6000813590506108e9816108c3565b92915050565b600060208284031215610905576109046105c6565b5b6000610913848285016108da565b91505092915050565b60006020820190506109316000830184610521565b92915050565b600081905092915050565b600061094d8261075f565b6109578185610937565b935061096781856020860161077b565b80840191505092915050565b600061097f8284610942565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109d157607f821691505b6020821081036109e4576109e361098a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610a4c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610a0f565b610a568683610a0f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a93610a8e610a8984610517565b610a6e565b610517565b9050919050565b6000819050919050565b610aad83610a78565b610ac1610ab982610a9a565b848454610a1c565b825550505050565b600090565b610ad6610ac9565b610ae1818484610aa4565b505050565b5b81811015610b0557610afa600082610ace565b600181019050610ae7565b5050565b601f821115610b4a57610b1b816109ea565b610b24846109ff565b81016020851015610b33578190505b610b47610b3f856109ff565b830182610ae6565b50505b505050565b600082821c905092915050565b6000610b6d60001984600802610b4f565b1980831691505092915050565b6000610b868383610b5c565b9150826002028217905092915050565b610b9f8261075f565b67ffffffffffffffff811115610bb857610bb76105eb565b5b610bc282546109b9565b610bcd828285610b09565b600060209050601f831160018114610c005760008415610bee578287015190505b610bf88582610b7a565b865550610c60565b601f198416610c0e866109ea565b60005b82811015610c3657848901518255600182019150602085019450602081019050610c11565b86831015610c535784890151610c4f601f891682610b5c565b8355505b6001600288020188555050505b50505050505056fea264697066735822122060a0378aaea5b181ba3a91af2e62bba41ba97b22d3b415289c6a9ba15fd2eb5964736f6c63430008120033"

# コントラクトのデプロイ
def deploy_contract():
    contract = web3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
    tx_hash = contract.constructor().transact({
        'from': web3.eth.default_account,
        'gas': 2000000,
        'gasPrice': web3.to_wei('21', 'gwei'),
    })
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    return tx_receipt.contractAddress

# スマートコントラクトにIPFSハッシュを格納
def store_ipfs_hash_in_contract(contract_address, hashName, ipfs_hash):
    contract = web3.eth.contract(address=contract_address, abi=contract_abi)
    tx_hash = contract.functions.addHash(hashName, ipfs_hash).transact()
    web3.eth.wait_for_transaction_receipt(tx_hash)
    check_account = contract.functions.addHash(hashName, ipfs_hash).call()
    print('check_account : ', check_account)

if __name__ == "__main__":
    hashName1 = 'Park'
    ipfs_name1 = 'park'
    ipfs_hash1 = "QmdTHBrv81qo7i68BVQZjW66yRC6gQgLMvB4PETbCWFuDv"
    # ipfs_hash1 = "QmVuKEjUpeJjwRRzmkaRytW1obPxQa8J2K4GJKWRPy6j6v"

    hashName2 = 'City'
    ipfs_name2 = 'city'
    ipfs_hash2 = "QmR82CgfTv27Ms7cfZg9dKhhCh69FuY1FURbj8BcdLo473"
    # ipfs_hash2 = "QmYpobzTjcJ2hX5Zs8spWv9Un395cagiXDvUUQKz7nQ5tN"
    contract_address = None  # デプロイ後にコントラクトアドレスを設定

        # スマートコントラクトのデプロイ
    contract_address = deploy_contract()
    print(f"Deployed contract at address: {contract_address}")

    # スマートコントラクトにIPFSハッシュを格納
    store_ipfs_hash_in_contract(contract_address, hashName1, ipfs_hash1)
    print("IPFS hash stored in contract :", hashName1, ' : ', ipfs_hash1)
    store_ipfs_hash_in_contract(contract_address, hashName2, ipfs_hash2)
    print("IPFS hash stored in contract :", hashName2, ' : ', ipfs_hash2)


    # アドレスをファイルに保存
    with open("rosipfs_contract_address.json", "w") as f:
        json.dump({"contract_address": contract_address}, f)
