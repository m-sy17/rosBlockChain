#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
import rospy
from sensor_msgs.msg import Image
from geometry_msgs.msg import PoseStamped, Twist
from std_msgs.msg import Float32MultiArray
from std_msgs.msg import String
from cv_bridge import CvBridge
import cv2
import time
import threading

# onnx呼び出し用に追記
from web3 import Web3
# from eth import web3
import json
import requests
import csv

import os
import sys

class ONNXDeploy:
    def __init__(self):
        self.web3 = Web3(Web3.HTTPProvider('http://192.168.10.108:7545'))
        self.web3.is_connected()
        # self.web3.eth.default_account = self.web3.eth.accounts[4]
        self.default_account = self.web3.eth.accounts[0]
        self.contract_abi = '''
        [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Received",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_hashName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_ipfsHash",
						"type": "string"
					}
				],
				"name": "addHash",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "balance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_hashName",
						"type": "string"
					}
				],
				"name": "getHash",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "ipfsData",
				"outputs": [
					{
						"internalType": "string",
						"name": "ipfsHash",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_hashName",
						"type": "string"
					}
				],
				"name": "showIpfsData",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		]
        '''
        self.contract_bytecode = "60806040526000805534801561001457600080fd5b506110be806100246000396000f3fe60806040526004361061004e5760003560e01c80635b6beeb91461018c578063aceed265146101bd578063c2a08015146101fb578063e3d670d714610238578063e487bff01461027557610187565b36610187577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874333460405161008492919061088c565b60405180910390a16000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036101185734600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461016791906108e4565b925050819055503460008082825461017f91906108e4565b925050819055005b600080fd5b6101a660048036038101906101a19190610a72565b6102b3565b6040516101b4929190610b3a565b60405180910390f35b3480156101c957600080fd5b506101e460048036038101906101df9190610a72565b610552565b6040516101f2929190610b3a565b60405180910390f35b34801561020757600080fd5b50610222600480360381019061021d9190610b6a565b610634565b60405161022f9190610be2565b60405180910390f35b34801561024457600080fd5b5061025f600480360381019061025a9190610c29565b6106ee565b60405161026c9190610c56565b60405180910390f35b34801561028157600080fd5b5061029c60048036038101906102979190610a72565b610706565b6040516102aa929190610b3a565b60405180910390f35b6060600080670de0b6b3a7640000905060006001856040516102d59190610cad565b90815260200160405180910390209050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561033157600080fd5b60006001866040516103439190610cad565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360405161039890610cf5565b60006040518083038185875af1925050503d80600081146103d5576040519150601f19603f3d011682016040523d82523d6000602084013e6103da565b606091505b505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610d56565b60405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461046d9190610d76565b92505081905550816000016001876040516104889190610cad565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168180546104c690610dd9565b80601f01602080910402602001604051908101604052809291908181526020018280546104f290610dd9565b801561053f5780601f106105145761010080835404028352916020019161053f565b820191906000526020600020905b81548152906001019060200180831161052257829003601f168201915b5050505050915094509450505050915091565b60018180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461058b90610dd9565b80601f01602080910402602001604051908101604052809291908181526020018280546105b790610dd9565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600060405180604001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff168152506001846040516106719190610cad565b908152602001604051809103902060008201518160000190816106949190610fb6565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060003390508091505092915050565b60026020528060005260406000206000915090505481565b606060008060018460405161071b9190610cad565b908152602001604051809103902060405180604001604052908160008201805461074490610dd9565b80601f016020809104026020016040519081016040528092919081815260200182805461077090610dd9565b80156107bd5780601f10610792576101008083540402835291602001916107bd565b820191906000526020600020905b8154815290600101906020018083116107a057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806000015181602001519250925050915091565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085d82610832565b9050919050565b61086d81610852565b82525050565b6000819050919050565b61088681610873565b82525050565b60006040820190506108a16000830185610864565b6108ae602083018461087d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108ef82610873565b91506108fa83610873565b9250828201905080821115610912576109116108b5565b5b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61097f82610936565b810181811067ffffffffffffffff8211171561099e5761099d610947565b5b80604052505050565b60006109b1610918565b90506109bd8282610976565b919050565b600067ffffffffffffffff8211156109dd576109dc610947565b5b6109e682610936565b9050602081019050919050565b82818337600083830152505050565b6000610a15610a10846109c2565b6109a7565b905082815260208101848484011115610a3157610a30610931565b5b610a3c8482856109f3565b509392505050565b600082601f830112610a5957610a5861092c565b5b8135610a69848260208601610a02565b91505092915050565b600060208284031215610a8857610a87610922565b5b600082013567ffffffffffffffff811115610aa657610aa5610927565b5b610ab284828501610a44565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610af5578082015181840152602081019050610ada565b60008484015250505050565b6000610b0c82610abb565b610b168185610ac6565b9350610b26818560208601610ad7565b610b2f81610936565b840191505092915050565b60006040820190508181036000830152610b548185610b01565b9050610b636020830184610864565b9392505050565b60008060408385031215610b8157610b80610922565b5b600083013567ffffffffffffffff811115610b9f57610b9e610927565b5b610bab85828601610a44565b925050602083013567ffffffffffffffff811115610bcc57610bcb610927565b5b610bd885828601610a44565b9150509250929050565b6000602082019050610bf76000830184610864565b92915050565b610c0681610852565b8114610c1157600080fd5b50565b600081359050610c2381610bfd565b92915050565b600060208284031215610c3f57610c3e610922565b5b6000610c4d84828501610c14565b91505092915050565b6000602082019050610c6b600083018461087d565b92915050565b600081905092915050565b6000610c8782610abb565b610c918185610c71565b9350610ca1818560208601610ad7565b80840191505092915050565b6000610cb98284610c7c565b915081905092915050565b600081905092915050565b50565b6000610cdf600083610cc4565b9150610cea82610ccf565b600082019050919050565b6000610d0082610cd2565b9150819050919050565b7f4661696c656420746f2073656e64204574686572650000000000000000000000600082015250565b6000610d40601583610ac6565b9150610d4b82610d0a565b602082019050919050565b60006020820190508181036000830152610d6f81610d33565b9050919050565b6000610d8182610873565b9150610d8c83610873565b9250828203905081811115610da457610da36108b5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610df157607f821691505b602082108103610e0457610e03610daa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e6c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e2f565b610e768683610e2f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610eb3610eae610ea984610873565b610e8e565b610873565b9050919050565b6000819050919050565b610ecd83610e98565b610ee1610ed982610eba565b848454610e3c565b825550505050565b600090565b610ef6610ee9565b610f01818484610ec4565b505050565b5b81811015610f2557610f1a600082610eee565b600181019050610f07565b5050565b601f821115610f6a57610f3b81610e0a565b610f4484610e1f565b81016020851015610f53578190505b610f67610f5f85610e1f565b830182610f06565b50505b505050565b600082821c905092915050565b6000610f8d60001984600802610f6f565b1980831691505092915050565b6000610fa68383610f7c565b9150826002028217905092915050565b610fbf82610abb565b67ffffffffffffffff811115610fd857610fd7610947565b5b610fe28254610dd9565b610fed828285610f29565b600060209050601f831160018114611020576000841561100e578287015190505b6110188582610f9a565b865550611080565b601f19841661102e86610e0a565b60005b8281101561105657848901518255600182019150602085019450602081019050611031565b86831015611073578489015161106f601f891682610f7c565b8355505b6001600288020188555050505b50505050505056fea264697066735822122091b4790b59a77a54755ead786d38d922f10ae085dee40257ae9bd8523b3cc80864736f6c63430008120033"
    
    def deploy_contract(self):
        self.contract = self.web3.eth.contract(abi = self.contract_abi, bytecode = self.contract_bytecode)
        tx_hash = self.contract.constructor().transact({
			'from':self.default_account,
		})
        tx_receipt = self.web3.eth.wait_for_transaction_receipt(tx_hash)
        print('tx_receipt : ', tx_receipt)
        return tx_receipt.contractAddress
    
 
if __name__ == "__main__":
    onnx_deploy = ONNXDeploy()
    rospy.init_node('contract_deploy')
    
    # deploy
    contract_address = onnx_deploy.deploy_contract()
    print(f"Deployed contract at address: {contract_address}")
    
        # アドレスをファイルに保存
    with open("contract_address.json", "w") as f:
        json.dump({"contract_address": contract_address}, f)

# cityのonnxファイルを共有するアカウント