# image.solを使用
# Parkモデル保存用アカウント
#IPFSのハッシュ値を格納し、コントラクトのアドレスを別ファイルに記述するコード
from web3 import Web3
import json

# Ganacheのローカルノードに接続
web3 = Web3(Web3.HTTPProvider('http://localhost:7545'))
web3.eth.default_account = web3.eth.accounts[0]  # アカウントを選択

# スマートコントラクトのABIとバイナリを設定
contract_abi = '''
[
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "Received",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_hashName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_ipfsHash",
				"type": "string"
			}
		],
		"name": "addHash",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "balance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_hashName",
				"type": "string"
			}
		],
		"name": "getHash",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "ipfsData",
		"outputs": [
			{
				"internalType": "string",
				"name": "ipfsHash",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"stateMutability": "payable",
		"type": "receive"
	}
]
'''
contract_bytecode = "60806040526000805534801561001457600080fd5b50610f22806100246000396000f3fe6080604052600436106100435760003560e01c80635b6beeb914610181578063aceed265146101b1578063c2a08015146101ef578063e3d670d71461022c5761017c565b3661017c577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f8852587433346040516100799291906106ce565b60405180910390a16000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361010d5734600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461015c9190610726565b92505081905550346000808282546101749190610726565b925050819055005b600080fd5b61019b600480360381019061019691906108b4565b610269565b6040516101a8919061097c565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d391906108b4565b6104c0565b6040516101e692919061099e565b60405180910390f35b3480156101fb57600080fd5b50610216600480360381019061021191906109ce565b6105a2565b6040516102239190610a46565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e9190610a8d565b61065c565b6040516102609190610aba565b60405180910390f35b60606000670de0b6b3a76400009050600060018460405161028a9190610b11565b90815260200160405180910390209050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156102e657600080fd5b60006001856040516102f89190610b11565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360405161034d90610b59565b60006040518083038185875af1925050503d806000811461038a576040519150601f19603f3d011682016040523d82523d6000602084013e61038f565b606091505b50509050806103d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ca90610bba565b60405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104229190610bda565b9250508190555081600001805461043890610c3d565b80601f016020809104026020016040519081016040528092919081815260200182805461046490610c3d565b80156104b15780601f10610486576101008083540402835291602001916104b1565b820191906000526020600020905b81548152906001019060200180831161049457829003601f168201915b50505050509350505050919050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546104f990610c3d565b80601f016020809104026020016040519081016040528092919081815260200182805461052590610c3d565b80156105725780601f1061054757610100808354040283529160200191610572565b820191906000526020600020905b81548152906001019060200180831161055557829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600060405180604001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff168152506001846040516105df9190610b11565b908152602001604051809103902060008201518160000190816106029190610e1a565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060003390508091505092915050565b60026020528060005260406000206000915090505481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069f82610674565b9050919050565b6106af81610694565b82525050565b6000819050919050565b6106c8816106b5565b82525050565b60006040820190506106e360008301856106a6565b6106f060208301846106bf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610731826106b5565b915061073c836106b5565b9250828201905080821115610754576107536106f7565b5b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107c182610778565b810181811067ffffffffffffffff821117156107e0576107df610789565b5b80604052505050565b60006107f361075a565b90506107ff82826107b8565b919050565b600067ffffffffffffffff82111561081f5761081e610789565b5b61082882610778565b9050602081019050919050565b82818337600083830152505050565b600061085761085284610804565b6107e9565b90508281526020810184848401111561087357610872610773565b5b61087e848285610835565b509392505050565b600082601f83011261089b5761089a61076e565b5b81356108ab848260208601610844565b91505092915050565b6000602082840312156108ca576108c9610764565b5b600082013567ffffffffffffffff8111156108e8576108e7610769565b5b6108f484828501610886565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561093757808201518184015260208101905061091c565b60008484015250505050565b600061094e826108fd565b6109588185610908565b9350610968818560208601610919565b61097181610778565b840191505092915050565b600060208201905081810360008301526109968184610943565b905092915050565b600060408201905081810360008301526109b88185610943565b90506109c760208301846106a6565b9392505050565b600080604083850312156109e5576109e4610764565b5b600083013567ffffffffffffffff811115610a0357610a02610769565b5b610a0f85828601610886565b925050602083013567ffffffffffffffff811115610a3057610a2f610769565b5b610a3c85828601610886565b9150509250929050565b6000602082019050610a5b60008301846106a6565b92915050565b610a6a81610694565b8114610a7557600080fd5b50565b600081359050610a8781610a61565b92915050565b600060208284031215610aa357610aa2610764565b5b6000610ab184828501610a78565b91505092915050565b6000602082019050610acf60008301846106bf565b92915050565b600081905092915050565b6000610aeb826108fd565b610af58185610ad5565b9350610b05818560208601610919565b80840191505092915050565b6000610b1d8284610ae0565b915081905092915050565b600081905092915050565b50565b6000610b43600083610b28565b9150610b4e82610b33565b600082019050919050565b6000610b6482610b36565b9150819050919050565b7f4661696c656420746f2073656e64204574686572650000000000000000000000600082015250565b6000610ba4601583610908565b9150610baf82610b6e565b602082019050919050565b60006020820190508181036000830152610bd381610b97565b9050919050565b6000610be5826106b5565b9150610bf0836106b5565b9250828203905081811115610c0857610c076106f7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c5557607f821691505b602082108103610c6857610c67610c0e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610cd07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c93565b610cda8683610c93565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d17610d12610d0d846106b5565b610cf2565b6106b5565b9050919050565b6000819050919050565b610d3183610cfc565b610d45610d3d82610d1e565b848454610ca0565b825550505050565b600090565b610d5a610d4d565b610d65818484610d28565b505050565b5b81811015610d8957610d7e600082610d52565b600181019050610d6b565b5050565b601f821115610dce57610d9f81610c6e565b610da884610c83565b81016020851015610db7578190505b610dcb610dc385610c83565b830182610d6a565b50505b505050565b600082821c905092915050565b6000610df160001984600802610dd3565b1980831691505092915050565b6000610e0a8383610de0565b9150826002028217905092915050565b610e23826108fd565b67ffffffffffffffff811115610e3c57610e3b610789565b5b610e468254610c3d565b610e51828285610d8d565b600060209050601f831160018114610e845760008415610e72578287015190505b610e7c8582610dfe565b865550610ee4565b601f198416610e9286610c6e565b60005b82811015610eba57848901518255600182019150602085019450602081019050610e95565b86831015610ed75784890151610ed3601f891682610de0565b8355505b6001600288020188555050505b50505050505056fea264697066735822122002202a578a26a5deb202e23d697bde316d54cc717baf4332e1cc5d617598e62f64736f6c63430008120033"

# コントラクトのデプロイ
def deploy_contract():
    contract = web3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
    tx_hash = contract.constructor().transact({
        'from': web3.eth.default_account,
        # 'gas': 2000000,
        # 'gasPrice': web3.to_wei('21', 'gwei'),
    })
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    return tx_receipt.contractAddress

# スマートコントラクトにIPFSハッシュを格納
def store_ipfs_hash_in_contract(contract_address, hashName, ipfs_hash):
    contract = web3.eth.contract(address=contract_address, abi=contract_abi)
    tx_hash = contract.functions.addHash(hashName, ipfs_hash).transact()
    web3.eth.wait_for_transaction_receipt(tx_hash)
    check_account = contract.functions.addHash(hashName, ipfs_hash).call()
    print('check_account : ', check_account)

if __name__ == "__main__":
    hashName1 = 'Park'
    ipfs_hash1 = "QmdTHBrv81qo7i68BVQZjW66yRC6gQgLMvB4PETbCWFuDv"
    # ipfs_hash1 = "QmVuKEjUpeJjwRRzmkaRytW1obPxQa8J2K4GJKWRPy6j6v"

    hashName2 = 'City'
    ipfs_hash2 = "QmR82CgfTv27Ms7cfZg9dKhhCh69FuY1FURbj8BcdLo473"
    # ipfs_hash2 = "QmYpobzTjcJ2hX5Zs8spWv9Un395cagiXDvUUQKz7nQ5tN"
    contract_address = None  # デプロイ後にコントラクトアドレスを設定

        # スマートコントラクトのデプロイ
    contract_address = deploy_contract()
    print(f"Deployed contract at address: {contract_address}")

    # スマートコントラクトにIPFSハッシュを格納
    store_ipfs_hash_in_contract(contract_address, hashName1, ipfs_hash1)
    print("IPFS hash stored in contract :", hashName1, ' : ', ipfs_hash1)
    store_ipfs_hash_in_contract(contract_address, hashName2, ipfs_hash2)
    print("IPFS hash stored in contract :", hashName2, ' : ', ipfs_hash2)


    # アドレスをファイルに保存
    with open("rosipfs_contract_address.json", "w") as f:
        json.dump({"contract_address": contract_address}, f)

